clear; clc;

% --- USER PARAMETERS ---
spikeFile = 'OWT220207_1I_DIV63_PER37_6UA_Cspikes_L0_RP2.mat_Nortefact.mat';
rawFile   = 'OWT220207_1I_DIV63_PER37_6UA.mat';
artifact_window_ms = [0, 2]; % artifact window around stim (in ms)
fs = 25000; % sample rate (Hz)
spikeMethod = 'bior1p5'; % adjust as needed
numChannels = 60; % adjust as needed
%%
% --- CONVERT SPIKE TIMES ---
% This section either loads the MEA-NAP 'spikeTimes' data structure and renames it to
% spiketimesconverted or detects Mona's 'spikes' structure, converts it to
% the MEA-NAP format, and calls it spike times converted
S = load(spikeFile);
if isfield(S, 'spikeTimes')
    spikeTimesConverted = S.spikeTimes;
elseif isfield(S, 'spikes')
    disp('Converting ''spikes'' matrix to ''spiketimesconverted'' struct format...');
    [row, col] = find(S.spikes);
    spikeTimesConverted = cell(1, numChannels);
    for ch = 1:numChannels
        spike_samples = row(col == ch);
        spike_sec = spike_samples / fs;
        spikeTimesConverted{ch} = struct(spikeMethod, spike_sec);
    end
else
    error('Neither ''spikeTimes'' nor ''spikes'' found in file.');
end
%%
% --- ESTIMATE STIM TIMES ---
R = load(rawFile);
if isfield(R, 'dat')
    dat = double(R.dat);
else
    error('Raw data variable "dat" not found in %s', rawFile);
end

[num_samples, ~] = size(dat);

stimThreshold = -1000; % adjust as needed
flat_window_ms = 1.5;
flat_thresh = 0.05;
min_interval_ms = 2500;
flat_search_window_ms = 100;
flat_window_samples = round(flat_window_ms * fs / 1000);
flat_search_samples = round(flat_search_window_ms * fs / 1000);

stim_times_sec = [];
for channel_idx = 1:numChannels
    trace = dat(:, channel_idx);
    idx = find(trace > stimThreshold);
    if isempty(idx), continue, end
    idx = idx(:);
    keep = [true; diff(idx) > round(0.010 * fs)];
    idx = idx(keep);
    for i = 1:length(idx)
        center_idx = idx(i);
        win_start = max(1, center_idx - flat_search_samples);
        win_end = min(num_samples, center_idx + flat_search_samples);
        win_trace = trace(win_start:win_end);
        abs_diff = [0; abs(diff(win_trace))];
        mov_abs_diff = movmean(abs_diff, flat_window_samples);
        flat_idx = find(mov_abs_diff < flat_thresh);
        if ~isempty(flat_idx)
            flat_onsets = flat_idx([true; diff(flat_idx) > 1]);
            flat_onsets_adj = flat_onsets - floor(flat_window_samples/2);
            flat_onsets_adj(flat_onsets_adj < 1) = 1;
            if ~isempty(flat_onsets_adj)
                keep_idx = [true; diff(flat_onsets_adj) > round(min_interval_ms * fs / 1000)];
                flat_onsets_adj = flat_onsets_adj(keep_idx);
            end
            for j = 1:length(flat_onsets_adj)
                stim_idx = win_start - 1 + flat_onsets_adj(j);
                stim_time_sec = stim_idx / fs;
                stim_times_sec = [stim_times_sec; stim_time_sec]; %#ok<AGROW>
            end
        end
    end
end

stim_times_sec = sort(stim_times_sec);
stimTimesConverted = stim_times_sec(:); % [T x 1] vector, seconds

%%
% --- EXTRACT SPIKE TIMES FOR ALL CHANNELS AND REMOVE ARTIFACT SPIKES ---
spikeTimesConvertedCleaned = cell(1, numChannels);

for ch = 1:numChannels
    if isempty(spikeTimesConverted{ch}) || ~isfield(spikeTimesConverted{ch}, spikeMethod)
        spikeTimesConvertedCleaned{ch} = [];
    else
        spikeTimes_sec = spikeTimesConverted{ch}.(spikeMethod); % s
        % Remove spikes near any stim
        for stimIdx = 1:numel(stimTimesConverted)
            stimTime = stimTimesConverted(stimIdx); % s
            spikeTimes_sec = spikeTimes_sec(...
                spikeTimes_sec < (stimTime + artifact_window_ms(1)/1000) | ...
                spikeTimes_sec >= (stimTime + artifact_window_ms(2)/1000) ...
                );
        end
        spikeTimesConvertedCleaned{ch} = sort(spikeTimes_sec(:)); % [S x 1] vector, seconds
    end
end

%%
% --- SAVE OUTPUT ---
save('spikeTimesConvertedCleaned.mat', 'spikeTimesConvertedCleaned');
save('stimTimesConverted.mat', 'stimTimesConverted');

fprintf('Saved spikeTimesConvertedCleaned.mat (all channels) and eventTimes.mat.\n');

%% LAUNCH LATENZY
clearvars; clc;

% Load data
load('stimTimesConverted.mat', 'stimTimesConverted');
load('spikeTimesConvertedCleaned.mat', 'spikeTimesConvertedCleaned');

% Electrode/channel mapping from the provided image:
% indices: channel indices as in left panel (channel index)
indices = [24 26 29 32 35 37, ...
           21 22 25 30 31 36 39 40, ...
           19 20 23 28 33 38 41 42, ...
           16 17 18 27 34 43 44 45, ...
           15 14 13 4 57 48 47 46, ...
           12 11 8 3 58 53 50 49, ...
           10 9 6 1 60 55 52 51, ...
           7 5 2 59 56 54];

% ids: channel IDs as in right panel (channel ID)
ids = [21 31 41 51 61 71, ...
       12 22 32 42 52 62 72 82, ...
       13 23 33 43 53 63 73 83, ...
       14 24 34 44 54 64 74 84, ...
       15 25 35 45 55 65 75 85, ...
       16 26 36 46 56 66 76 86, ...
       17 27 37 47 57 67 77 87, ...
       28 38 48 58 68 78];

% Reorder spikeTimesConvertedCleaned to match channel IDs (right panel)
spikeTimesByID = cell(size(ids));
for i = 1:numel(ids)
    idx = find(indices == ids(i), 1);
    if ~isempty(idx)
        spikeTimesByID{i} = spikeTimesConvertedCleaned{idx};
    else
        spikeTimesByID{i} = [];
    end
end
spikeTimesConvertedCleaned = spikeTimesByID;

% (Assuming stimTimesConverted doesn't need remapping per channel;
% if you need per-channel event times, apply similar logic.)

eventTimes = stimTimesConverted;
numChannels = numel(spikeTimesConvertedCleaned);

% Launch parameters
useDur = 0.5; %in seconds
resampNum = 100;
jitterSize = 2;
peakAlpha = 0.05;
doStitch = true;
useParPool = false;
useDirectQuant = false;
restrictNeg = true;
makePlots = true;

calculatedLatencies = struct([]);

% Create a date-stamped plot folder for this run
plotFolder = ['latenzyplot_' datestr(now, 'ddmmmyy_HH:MM')];
if ~exist(plotFolder, 'dir')
    mkdir(plotFolder);
end

for ch = 1:numChannels
    spikeTimes = spikeTimesConvertedCleaned{ch};

    % Record currently open figures before latenzy
    figsBefore = findall(0, 'Type', 'figure');
    
    if isempty(spikeTimes)
        latency = NaN;
        sLatenzy = [];
    else
        [latency, sLatenzy] = latenzy(spikeTimes, eventTimes, useDur, resampNum, ...
            jitterSize, peakAlpha, doStitch, useParPool, useDirectQuant, restrictNeg, makePlots);

        % Record open figures after latenzy
        figsAfter = findall(0, 'Type', 'figure');
        % Identify new figures
        newFigs = setdiff(figsAfter, figsBefore);

        % Save all new figures
        for fIdx = 1:numel(newFigs)
            fh = newFigs(fIdx);
            if isgraphics(fh, 'figure')
                exportgraphics(fh, fullfile(plotFolder, ...
                    sprintf('Duration%dto%d_ms_Ch%d_fig%d.png', round(useDur(1)*1000), round(useDur(2)*1000), ids(ch), fIdx)));
                % Optionally close to avoid too many open figures:
                close(fh);
            end
        end
    end

    calculatedLatencies(ch).electrode = ids(ch); % Use channel ID directly
    calculatedLatencies(ch).latency = latency;
    calculatedLatencies(ch).sLatenzy = sLatenzy;
end

save('calculatedLatencies.mat', 'calculatedLatencies');
fprintf('Saved calculatedLatencies.mat with latenzy results for all channels.\n');
