clearvars; clc;

% Load data
load('stimTimesConverted.mat', 'stimTimesConverted');
load('spikeTimesConvertedCleaned.mat', 'spikeTimesConvertedCleaned');

% Electrode/channel mapping from the provided image:
indices = [24 26 29 32 35 37, ...
           21 22 25 30 31 36 39 40, ...
           19 20 23 28 33 38 41 42, ...
           16 17 18 27 34 43 44 45, ...
           15 14 13 4 57 48 47 46, ...
           12 11 8 3 58 53 50 49, ...
           10 9 6 1 60 55 52 51, ...
           7 5 2 59 56 54];

ids = [21 31 41 51 61 71, ...
       12 22 32 42 52 62 72 82, ...
       13 23 33 43 53 63 73 83, ...
       14 24 34 44 54 64 74 84, ...
       15 25 35 45 55 65 75 85, ...
       16 26 36 46 56 66 76 86, ...
       17 27 37 47 57 67 77 87, ...
       28 38 48 58 68 78];

% Reorder spikeTimesConvertedCleaned to match channel IDs (right panel)
spikeTimesByID = cell(size(ids));
for i = 1:numel(ids)
    idx = find(indices == ids(i), 1);
    if ~isempty(idx)
        spikeTimesByID{i} = spikeTimesConvertedCleaned{idx};
    else
        spikeTimesByID{i} = [];
    end
end
spikeTimesConvertedCleaned = spikeTimesByID;

eventTimes = stimTimesConverted;
spikeTimesAll = spikeTimesConvertedCleaned; % cell array: one cell per channel

% Define time windows (in seconds)
window_durations = 0.01:0.005:0.2;

% Parameters for latenzy
resampNum = 100;
jitterSize = 2;
peakAlpha = 0.05;
doStitch = true;
useParPool = false;
useDirectQuant = false;
restrictNeg = true;
makePlots = false; % set to false to suppress multiple plots

numCh = numel(spikeTimesAll);
latencies = nan(numCh, numel(window_durations));

figure; hold on;

for ch = 1:numCh
    spikes = spikeTimesAll{ch};
    if isempty(spikes)
        continue; % skip empty channels
    end
    for i = 1:length(window_durations)
        useDur = window_durations(i);
        [latency, ~] = latenzy(spikes, eventTimes, useDur, resampNum, jitterSize, peakAlpha, ...
                               doStitch, useParPool, useDirectQuant, restrictNeg, makePlots);
        latencies(ch, i) = latency;
    end
    % Only plot non-NaN values
    validIdx = ~isnan(latencies(ch, :));
    if any(validIdx)
        % Use channel ID as label
        plot(window_durations(validIdx)*1000, latencies(ch, validIdx)*1000, '-o', ...
             'LineWidth', 2, 'MarkerSize', 2, 'DisplayName', ['Channel ID ' num2str(ids(ch))]);
    end
end

xlabel('Time window post-stimulus (ms) inputted into latenZy');
ylabel('Estimated latency (ms)');
title('Latency vs. time window post-stimulus for all channels');
grid on;
legend('show');
hold off;
