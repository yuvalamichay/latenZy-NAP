% Runs latenZy on each channel and plots time window vs. latency for all channels
% Only non-NaN latency values are plotted

clearvars; clc;

% Load data
load('stimTimesConverted.mat', 'stimTimesConverted');
load('spikeTimesConvertedCleaned.mat', 'spikeTimesConvertedCleaned');

eventTimes = stimTimesConverted;
spikeTimesAll = spikeTimesConvertedCleaned; % cell array: one cell per channel

% Define time windows (in seconds)
window_durations = 0.01:0.005:0.2;

% Parameters for latenzy
resampNum = 100;
jitterSize = 2;
peakAlpha = 0.05;
doStitch = true;
useParPool = false;
useDirectQuant = false;
restrictNeg = true;
makePlots = false; % set to false to suppress multiple plots

numCh = numel(spikeTimesAll);
latencies = nan(numCh, numel(window_durations));

figure; hold on;

for ch = 1:numCh
    spikes = spikeTimesAll{ch};
    if isempty(spikes)
        continue; % skip empty channels
    end
    for i = 1:length(window_durations)
        useDur = window_durations(i);
        [latency, ~] = latenzy(spikes, eventTimes, useDur, resampNum, jitterSize, peakAlpha, ...
                               doStitch, useParPool, useDirectQuant, restrictNeg, makePlots);
        latencies(ch, i) = latency;
    end
    % Only plot non-NaN values
    validIdx = ~isnan(latencies(ch, :));
    if any(validIdx)
        plot(window_durations(validIdx)*1000, latencies(ch, validIdx)*1000, '-o', ...
            'LineWidth', 2, 'MarkerSize', 2, 'DisplayName', ['Channel ' num2str(ch)]);
    end
end

xlabel('Time window post-stimulus (ms) inputted into latenZy');
ylabel('Estimated latency (ms)');
title('Latency vs. time window post-stimulus for all channels');
grid on;
legend('show');
hold off;
